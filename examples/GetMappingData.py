import numpy as np
import pandas as pd
import dill


def P_indv(eps):
    X_0 = eps
    from numpy import array, sin, cos

    # good for 0
    # P = (X_0) * ((cos((cos(array([[  1.70767347,  15.70924706, -72.57515233],
    #                               [ -1.90617918,  -0.45606281,  -7.18876172],
    #                               [ -3.15763625,  -4.66106505,  18.41164938]]))) @ (array([[  1.70767347,  15.70924706, -72.57515233],
    #                                                                                        [ -1.90617918,  -0.45606281,  -7.18876172],
    #                                                                                        [ -3.15763625,  -4.66106505,  18.41164938]])))) @ (array([[ 2.83780411,  0.16235985,  0.6838029 ],
    #                                                                                                                                                  [-0.63465263,  0.330658  , -2.06008688],
    #                                                                                                                                                  [-1.76457508,  0.56038016,  0.29825572]]))) + sin(array([[ 2.83780411,  0.16235985,  0.6838029 ],
    #                                                                                                                                                                                                           [-0.63465263,  0.330658  , -2.06008688],
    #                                                                                                                                                                                                           [-1.76457508,  0.56038016,  0.29825572]]))
    # P = cos((array([[ 0.69184835,  1.88913978, -0.65143506],
    #                 [-0.7867915 ,  1.66574395, -0.52543618],
    #                 [-1.06811612,  1.36525311,  0.39407372]])) @ (array([[ 0.69184835,  1.88913978, -0.65143506],
    #                                                                      [-0.7867915 ,  1.66574395, -0.52543618],
    #                                                                      [-1.06811612,  1.36525311,  0.39407372]])) + array([[ 0.69184835,  1.88913978, -0.65143506],
    #                                                                                                                          [-0.7867915 ,  1.66574395, -0.52543618],
    #                                                                                                                          [-1.06811612,  1.36525311,  0.39407372]]) + (array([[  24.7642423 ,   -9.799842  ,   26.66264829],
    #                                                                                                                                                                              [  12.64138312,    5.48353574, -113.67375012],
    #                                                                                                                                                                              [  23.39405901, -115.0282999 ,   22.83673205]])) * (X_0)) + array([[ 3.84711049, -1.69757207, -3.09647807],
    #                                                                                                                                                                                                                                                 [-2.19133507,  2.45122552, -0.94635557],
    #                                                                                                                                                                                                                                                 [-2.40768709, -0.46183816,  2.75648588]])

    # good for 57
    P = sin(sin((X_0) * (sin(array([[-0.00601731, -0.65488713,  1.47498776],
                                    [ 2.47032006, -0.00289251, -0.74149528],
                                    [-0.59111337,  1.0893791 , -0.00484731]])) + array([[ 0.04674035,  5.03172033,  3.37870572],
                                                                                        [-5.23438217,  0.01977186,  5.26287249],
                                                                                        [ 4.69473748,  3.84631735,  0.0335588 ]]))) + sin(array([[-0.00601731, -0.65488713,  1.47498776],
                                                                                                                                                 [ 2.47032006, -0.00289251, -0.74149528],
                                                                                                                                                 [-0.59111337,  1.0893791 , -0.00484731]])) + sin(array([[-0.00601731, -0.65488713,  1.47498776],
                                                                                                                                                                                                         [ 2.47032006, -0.00289251, -0.74149528],
                                                                                                                                                                                                         [-0.59111337,  1.0893791 , -0.00484731]])))
    # good for hill
    P = ((array([[ 79.40125237,  54.5440567 ,  62.9634546 ],
                  [  2.34369906, -41.45552724, -25.5463919 ],
                  [-90.35847285, -21.21201713, -44.8998093 ]])) @ (array([[ 79.40125237,  54.5440567 ,  62.9634546 ],
                                                                          [  2.34369906, -41.45552724, -25.5463919 ],
                                                                          [-90.35847285, -21.21201713, -44.8998093 ]]))) * (X_0)
    return P


if __name__ == "__main__":
    # original_name = "vpsc_evo_17_data_3d_points_transpose_implicit_format"
    # original_name = "vpsc_evo_0_data_3d_points_implicit_format"
    # original_name = "vpsc_evo_57_data_3d_points_implicit_format"
    original_name = "hill_w_hardening"
    data = np.loadtxt(original_name + ".txt")
    data = data[np.invert(np.all(np.isnan(data), axis=1))]

    eps_index = data.shape[1] - 1

    eps = data[:, eps_index][:, None, None]

    P_actual = P_indv(eps)
    if P_actual.ndim == 2:
        P_actual = np.repeat(P_actual[None, :, :], repeats=eps.shape[0], axis=0)
    # P_vm = np.array([[1, -0.5, -0.5],
    #                  [-0.5, 1, -0.5],
    #                  [-0.5, -0.5, 1]])[None, :, :] / (100 * ((eps + 1) ** 2))
    P_vm = np.array([[1, -0.5, -0.5],
                     [-0.5, 1, -0.5],
                     [-0.5, -0.5, 1]])

    P_vm = np.repeat(P_vm[None, :, :], repeats=len(P_actual), axis=0)

    df = pd.DataFrame(data={"eps": eps.squeeze().tolist(), "P_actual": P_actual.tolist(), "P_vm": P_vm.tolist()})

    df.to_pickle(original_name + "_mapping_df.pkl")
    print("done. saved to", original_name + "_mapping_df.pkl")
